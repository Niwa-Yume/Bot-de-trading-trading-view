//@version=5
strategy("Optimized Trend Following", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=99, initial_capital=1000, commission_type=strategy.commission.percent, commission_value=0.07)

// ====== Inputs ======
// Source
src = input(close, title="Source")

// EMA Parameters
ema_short_length = input.int(50, minval=1, title="Short EMA Length", group="EMA Parameters")
ema_long_length = input.int(200, minval=1, title="Long EMA Length", group="EMA Parameters")
ema_filter_length = input.int(10, title="EMA Filter Length", group="EMA Parameters")

// ADX Parameters
adx_length = input.int(14, minval=1, title="ADX Length", group="ADX Parameters")
adx_threshold = input.float(30, minval=0, title="ADX Threshold", group="ADX Parameters") // Augmenté pour plus de fiabilité

// Risk Management
sl_percent = input.float(2.5, title="Stop Loss (%)", minval=0.1, step=0.1, group="Risk Management")
tp_percent = input.float(5.0, title="Take Profit (%)", minval=0.1, step=0.1, group="Risk Management")
max_trades_per_day = input.int(2, title="Max Trades Per Day", minval=1, group="Risk Management")

// Trade Direction
use_longs = input.bool(true, title="Enable Long Positions", group="Trade Direction")
use_shorts = input.bool(true, title="Enable Short Positions", group="Trade Direction")

// Time Filters
start_date = input.time(timestamp("01 Jan 2017"), "Start Date", group="Time Filters")
end_date = input.time(timestamp("01 Jan 2025"), "End Date", group="Time Filters")
session_start = input.session("0930-1600", title="Trading Session", group="Time Filters")

// ====== Calculations ======
// Time Filters
in_date_range = (time >= start_date) and (time <= end_date)
is_trading_session = not na(time(timeframe.period, session_start))

// EMAs
ema_short = ta.ema(src, ema_short_length)
ema_long = ta.ema(src, ema_long_length)
ema_filter = ta.ema(src, ema_filter_length)

// ADX et RSI
[diplus, diminus, adx] = ta.dmi(adx_length, adx_length)
rsi = ta.rsi(src, 14)

// Volume
vol_sma = ta.sma(volume, 20)
high_volume = volume > vol_sma * 1.5

// Calcul des tendances
ema_crossover = ta.crossover(ema_short, ema_long)
ema_crossunder = ta.crossunder(ema_short, ema_long)
strong_trend = adx > adx_threshold

// Momentum et Volatilité
atr = ta.atr(14)
volatility_filter = atr < ta.sma(atr, 20) * 1.5  // Filtre de volatilité excessive

// Compteur de trades quotidien
var int trades_today = 0
if (dayofweek != dayofweek[1])
    trades_today := 0

// Définition des conditions d'entrée
var long_condition = false
var short_condition = false

// ====== Strategy Logic ======
can_trade = trades_today < max_trades_per_day and in_date_range and is_trading_session and volatility_filter

if can_trade
    // Conditions Long améliorées
    long_condition := ema_crossover and strong_trend and strategy.position_size == 0 and 
                     ema_filter > ema_short and 
                     high_volume and 
                     rsi > 40 and rsi < 70

    if use_longs and long_condition
        trades_today := trades_today + 1
        stop_loss = close * (1 - sl_percent/100)
        take_profit = close * (1 + tp_percent/100)
        strategy.entry("Long", strategy.long)
        strategy.exit("Long Exit", "Long", stop=stop_loss, limit=take_profit)
   
    // Conditions Short améliorées
    short_condition := ema_crossunder and strong_trend and strategy.position_size == 0 and 
                      ema_filter < ema_short and 
                      high_volume and 
                      rsi < 60 and rsi > 30

    if use_shorts and short_condition
        trades_today := trades_today + 1
        stop_loss = close * (1 + sl_percent/100)
        take_profit = close * (1 - tp_percent/100)
        strategy.entry("Short", strategy.short)
        strategy.exit("Short Exit", "Short", stop=stop_loss, limit=take_profit)

// ====== Plotting ======
ema_short_plot = plot(ema_short, color=color.blue, linewidth=2, title="EMA Short")
ema_long_plot = plot(ema_long, color=color.orange, linewidth=2, title="EMA Long")
plot(ema_filter, color=color.purple, linewidth=1, title="EMA Filter")

// Background coloring
bgcolor(strong_trend ? color.new(color.green, 90) : na, title="Strong Trend")
bgcolor(high_volume ? color.new(color.yellow, 90) : na, title="High Volume")

// Plot ADX
plot(adx, title="ADX", color=color.purple, linewidth=2, display=display.pane)
hline(adx_threshold, title="ADX Threshold", color=color.purple, linestyle=hline.style_dashed)

// Alertes
alertcondition(long_condition, title="Long Signal", message="Long entry signal detected!")
alertcondition(short_condition, title="Short Signal", message="Short entry signal detected!")
